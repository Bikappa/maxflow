[{"E:\\workspace\\nightfun\\src\\App.tsx":"1","E:\\workspace\\nightfun\\src\\components\\flow\\FlowArc.tsx":"2","E:\\workspace\\nightfun\\src\\components\\FlowNetworkEditor\\FlowNetworkEditor.tsx":"3","E:\\workspace\\nightfun\\src\\geometry\\index.tsx":"4","E:\\workspace\\nightfun\\src\\maxflow\\FordFulkerson.tsx":"5","E:\\workspace\\nightfun\\src\\utils\\index.tsx":"6","E:\\workspace\\nightfun\\src\\components\\flow\\FlowNode.tsx":"7","E:\\workspace\\nightfun\\src\\maxflow\\index.tsx":"8","E:\\workspace\\nightfun\\src\\components\\flow\\index.tsx":"9","E:\\workspace\\nightfun\\src\\index.tsx":"10","E:\\workspace\\nightfun\\src\\components\\FlowNetworkEditor\\index.tsx":"11","E:\\workspace\\nightfun\\src\\components\\FlowNetworkEditor\\SmartButton.tsx":"12"},{"size":168,"mtime":1609498228000,"results":"13","hashOfConfig":"14"},{"size":1335,"mtime":1609506588000,"results":"15","hashOfConfig":"14"},{"size":8621,"mtime":1609537122000,"results":"16","hashOfConfig":"14"},{"size":816,"mtime":1609506528000,"results":"17","hashOfConfig":"14"},{"size":2168,"mtime":1609523274000,"results":"18","hashOfConfig":"14"},{"size":136,"mtime":1607195950000,"results":"19","hashOfConfig":"14"},{"size":1268,"mtime":1609529564000,"results":"20","hashOfConfig":"14"},{"size":47,"mtime":1609497044000,"results":"21","hashOfConfig":"14"},{"size":94,"mtime":1607196934000,"results":"22","hashOfConfig":"14"},{"size":352,"mtime":1607197046000,"results":"23","hashOfConfig":"14"},{"size":56,"mtime":1609496764000,"results":"24","hashOfConfig":"14"},{"size":373,"mtime":1609536272000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1um9xdh",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\workspace\\nightfun\\src\\App.tsx",[],"E:\\workspace\\nightfun\\src\\components\\flow\\FlowArc.tsx",[],"E:\\workspace\\nightfun\\src\\components\\FlowNetworkEditor\\FlowNetworkEditor.tsx",["51"],"import { AppBar, ButtonGroup, makeStyles, Toolbar } from \"@material-ui/core\";\r\nimport { PlayArrow } from \"@material-ui/icons\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { createUseStyles } from \"react-jss\";\r\nimport { Point } from \"../../geometry\";\r\nimport { fordFulkerson } from \"../../maxflow\";\r\nimport { FlowArc, FlowNetworkNode } from \"../flow\";\r\nimport { NodeId, NumericLabeledArcs } from \"../types\";\r\nimport { SmartButton } from \"./SmartButton\";\r\n\r\nconst useStyles = createUseStyles({\r\n    canvas: {\r\n        width: '100%',\r\n        height: '100vh',\r\n    }\r\n})\r\n\r\nconst useMUIStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nclass Node<T>{\r\n    private id: NodeId\r\n    public value: T\r\n\r\n    constructor(id: NodeId, value: T) {\r\n        this.id = id;\r\n        this.value = value\r\n    }\r\n}\r\n\r\nclass Graph<T>{\r\n    private _nodes: { [id: string]: Node<T> } = {}\r\n    private _adjacencyTable: { [from: string]: { [to: string]: boolean } } = {}\r\n\r\n    addNode(id: string, value: T) {\r\n        if ((id in this._nodes)) {\r\n            throw new Error('Conflicting node id')\r\n        }\r\n\r\n        this._nodes[id] = new Node(id, value)\r\n    }\r\n\r\n    addArc(from: string, to: string) {\r\n        if (!this._adjacencyTable[from]) {\r\n            this._adjacencyTable[from] = {}\r\n        }\r\n        this._adjacencyTable[from][to] = true\r\n    }\r\n\r\n    getNodes() {\r\n        return this._nodes\r\n    }\r\n\r\n    getArcs() {\r\n        return Object.entries(this._adjacencyTable).map(([from, tos]) => {\r\n            return Object.entries(tos).filter(([, linked]) => linked).map(([to]) => [from, to])\r\n        }).flat()\r\n    }\r\n}\r\n\r\nclass FlowNode {\r\n    public id;\r\n    public position: Point\r\n    constructor(id: string, position: Point) {\r\n        this.id = id\r\n        this.position = position\r\n    }\r\n\r\n    toString() {\r\n        return this.id\r\n    }\r\n}\r\n\r\ntype NodeData = {\r\n    id: string,\r\n    position: Point,\r\n}\r\n\r\nfunction absoluteCoordinate(normalizedCoordinate: number, length: number) {\r\n    return (length + normalizedCoordinate * length) / 2\r\n}\r\nfunction normalizedCoordinate(absoluteCoordinate: number, length: number) {\r\n    return (absoluteCoordinate * 2 - length) / length\r\n}\r\n\r\nfunction absolutePosition(normalizedPosition: Point) {\r\n    return {\r\n        x: absoluteCoordinate(normalizedPosition.x, window.innerWidth),\r\n        y: absoluteCoordinate(normalizedPosition.y, window.innerHeight),\r\n    }\r\n}\r\n\r\nfunction relativePosition(absolutePosition: Point) {\r\n    return {\r\n        x: normalizedCoordinate(absolutePosition.x, window.innerWidth),\r\n        y: normalizedCoordinate(absolutePosition.y, window.innerHeight),\r\n    }\r\n}\r\n\r\nexport function FlowNetworkEditor() {\r\n    const muiClasses = useMUIStyles()\r\n    const [nodeData, setNodeData] = useState<{ [id: string]: NodeData }>({})\r\n    const [arcs, setArcs] = useState<NumericLabeledArcs>({})\r\n    const [flow, setFlow] = useState<NumericLabeledArcs>({})\r\n    const [source, setSource] = useState<NodeId | undefined>(undefined)\r\n    const [sink, setSink] = useState<NodeId | undefined>(undefined)\r\n    const [defaultArcCapacity] = useState(10)\r\n\r\n    const [selectedNode, setSelectedNode] = useState<NodeId | undefined>(undefined)\r\n\r\n    const graph = new Graph<FlowNode>();\r\n\r\n    Object.values(nodeData).forEach((node) => {\r\n        graph.addNode(node.id, new FlowNode(node.id, node.position))\r\n    })\r\n\r\n    for (const [from, tos] of Object.entries(arcs)) {\r\n        for (const [to] of Object.entries(tos)) {\r\n            graph.addArc(from, to)\r\n        }\r\n    }\r\n\r\n    const dragHandler = useCallback((id, event) => {\r\n        event.preventDefault()\r\n        const newPos = relativePosition({ x: event.clientX, y: event.clientY })\r\n        setNodeData((prev) => {\r\n            return {\r\n                ...prev,\r\n                [id]: {\r\n                    id,\r\n                    position: newPos\r\n                }\r\n            }\r\n        })\r\n    }, [setNodeData])\r\n\r\n    const canvasClickHandler = useCallback((e: React.MouseEvent) => {\r\n\r\n        setNodeData((prev) => {\r\n\r\n            //add a new node\r\n            const newNode = {\r\n                id: '' + Object.keys(prev).length,\r\n                position: relativePosition({ x: e.clientX, y: e.clientY })\r\n            }\r\n\r\n            return {\r\n                ...prev,\r\n                [newNode.id]: newNode,\r\n            }\r\n        })\r\n    }, [setNodeData])\r\n\r\n    const nodeClickHandler = selectedNode ? (id: NodeId) => {\r\n        //we add the new arc\r\n        if (id !== selectedNode && !arcs[selectedNode]?.[id] && !arcs[id]?.[selectedNode]) {\r\n            setArcs((prev) => ({\r\n                ...prev,\r\n                [selectedNode]: {\r\n                    ...prev[selectedNode],\r\n                    [id]: Math.round(8 * Math.random()) + 2\r\n                }\r\n            }))\r\n        }\r\n        setSelectedNode(undefined)\r\n    } : setSelectedNode\r\n\r\n    const runClickHandler = source && sink ? () => {\r\n        new Promise<NumericLabeledArcs>((resolve) => {\r\n            const flow = fordFulkerson(source, sink, arcs)\r\n            resolve(flow)\r\n        }).then(setFlow)\r\n    } : undefined\r\n\r\n    const deleteClickHandler = selectedNode ? () => {\r\n        if (source === selectedNode) {\r\n            setSource(undefined)\r\n        }\r\n\r\n        if (sink === selectedNode) {\r\n            setSink(undefined)\r\n        }\r\n\r\n        setSelectedNode(undefined)\r\n\r\n        //remove the arcs from and to the node\r\n        const { [selectedNode]: fromDeletedNodeArcs, ...otherArcs } = arcs\r\n\r\n        //remove the ingoing arcs to the node\r\n        for (const tos of Object.values(otherArcs)) {\r\n            delete tos[selectedNode]\r\n        }\r\n\r\n        setArcs(otherArcs)\r\n        //remove the node\r\n        const { [selectedNode]: deletedNode, ...otherNodes } = nodeData\r\n        setNodeData(otherNodes)\r\n\r\n    } : undefined\r\n\r\n    const sourceMarkClickHandler = selectedNode && selectedNode !== sink ? () => {\r\n        if (selectedNode === source) {\r\n            setSource(undefined)\r\n        } else {\r\n            setSource(selectedNode)\r\n        }\r\n        setSelectedNode(undefined)\r\n    } : undefined\r\n\r\n    const sinkMarkClickHandler = selectedNode && selectedNode !== source ? () => {\r\n        if (selectedNode === sink) {\r\n            setSink(undefined)\r\n        } else {\r\n            setSink(selectedNode)\r\n        }\r\n        setSelectedNode(undefined)\r\n    } : undefined\r\n\r\n    const classes = useStyles()\r\n    const graphNodes = graph.getNodes()\r\n\r\n    return <>\r\n        <AppBar position=\"fixed\">\r\n            <Toolbar className={muiClasses.root}>\r\n                <div className={muiClasses.grow} />\r\n                <ButtonGroup variant='contained' >\r\n                    <SmartButton onClick={sourceMarkClickHandler}>{selectedNode === source ? 'Unm' : 'M'}ark as source</SmartButton>\r\n                    <SmartButton onClick={sinkMarkClickHandler}>{selectedNode === sink ? 'Unm' : 'M'}ark as sink</SmartButton>\r\n                    <SmartButton onClick={deleteClickHandler}>Delete</SmartButton>\r\n                </ButtonGroup>\r\n                <SmartButton onClick={runClickHandler} color='primary' variant='contained' startIcon={<PlayArrow />}>Compute</SmartButton>\r\n            </Toolbar>\r\n        </AppBar>\r\n        <div onClick={canvasClickHandler} className={classes.canvas}>\r\n            {\r\n                Object.values(graphNodes).map(({ value }) => {\r\n                    return <FlowNetworkNode\r\n                        key={value.id}\r\n                        onDrag={(event) => dragHandler(value.id, event)}\r\n                        onClick={nodeClickHandler}\r\n                        {...value}\r\n                        position={absolutePosition(value.position)}\r\n                        bgColor={value.id === selectedNode ? 'red' : undefined}\r\n                        label={sink === value.id ? 'sink' : (source === value.id ? 'source' : undefined)}\r\n                    />\r\n                })\r\n            }\r\n            {\r\n                graph.getArcs().map(([from, to]) => {\r\n                    return <FlowArc\r\n                        key={from + '-' + to}\r\n                        flow={flow[from]?.[to] || 0}\r\n                        capacity={arcs[from][to]}\r\n                        start={absolutePosition(graphNodes[from].value.position)}\r\n                        end={absolutePosition(graphNodes[to].value.position)}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n    </>\r\n\r\n}","E:\\workspace\\nightfun\\src\\geometry\\index.tsx",[],"E:\\workspace\\nightfun\\src\\maxflow\\FordFulkerson.tsx",[],"E:\\workspace\\nightfun\\src\\utils\\index.tsx",[],"E:\\workspace\\nightfun\\src\\components\\flow\\FlowNode.tsx",[],"E:\\workspace\\nightfun\\src\\maxflow\\index.tsx",[],"E:\\workspace\\nightfun\\src\\components\\flow\\index.tsx",[],"E:\\workspace\\nightfun\\src\\index.tsx",[],"E:\\workspace\\nightfun\\src\\components\\FlowNetworkEditor\\index.tsx",[],"E:\\workspace\\nightfun\\src\\components\\FlowNetworkEditor\\SmartButton.tsx",[],{"ruleId":"52","severity":1,"message":"53","line":115,"column":12,"nodeType":"54","messageId":"55","endLine":115,"endColumn":30},"@typescript-eslint/no-unused-vars","'defaultArcCapacity' is assigned a value but never used.","Identifier","unusedVar"]