[{"E:\\workspace\\nightfun\\src\\components\\flow\\FlowNode.tsx":"1","E:\\workspace\\nightfun\\src\\components\\FlowNetworkEditor\\FlowNetworkEditor.tsx":"2","E:\\workspace\\nightfun\\src\\geometry\\index.tsx":"3","E:\\workspace\\nightfun\\src\\utils\\index.tsx":"4","E:\\workspace\\nightfun\\src\\components\\flow\\FlowArc.tsx":"5","E:\\workspace\\nightfun\\src\\maxflow\\FordFulkerson.tsx":"6"},{"size":1341,"mtime":1609671756000,"results":"7","hashOfConfig":"8"},{"size":7892,"mtime":1609671136000,"results":"9","hashOfConfig":"8"},{"size":816,"mtime":1609506528000,"results":"10","hashOfConfig":"8"},{"size":136,"mtime":1607195950000,"results":"11","hashOfConfig":"8"},{"size":1452,"mtime":1609668664000,"results":"12","hashOfConfig":"8"},{"size":2168,"mtime":1609523274000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1um9xdh",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\workspace\\nightfun\\src\\components\\flow\\FlowNode.tsx",[],"E:\\workspace\\nightfun\\src\\components\\FlowNetworkEditor\\FlowNetworkEditor.tsx",["27"],"import { AppBar, ButtonGroup, makeStyles, Toolbar } from \"@material-ui/core\";\n\nimport { useCallback, useState } from \"react\";\nimport { createUseStyles } from \"react-jss\";\nimport { Point } from \"../../geometry\";\nimport { fordFulkerson } from \"../../maxflow\";\nimport { FlowArc, FlowNetworkNode } from \"../flow\";\nimport { NodeId, NumericLabeledArcs } from \"../types\";\nimport { SmartButton } from \"./SmartButton\";\nimport FlagIcon from '@material-ui/icons/Flag';\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport InputIcon from '@material-ui/icons/Input';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst useStyles = createUseStyles({\n  canvas: {\n    width: '100%',\n    height: '100vh',\n  }\n})\n\nconst useMUIStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  grow: {\n    flexGrow: 1,\n  },\n}));\n\nclass Node<T>{\n  private id: NodeId\n  public value: T\n\n  constructor(id: NodeId, value: T) {\n    this.id = id;\n    this.value = value\n  }\n}\n\nclass Graph<T>{\n  private _nodes: { [id: string]: Node<T> } = {}\n  private _adjacencyTable: { [from: string]: { [to: string]: boolean } } = {}\n\n  addNode(id: string, value: T) {\n    if ((id in this._nodes)) {\n      throw new Error('Conflicting node id')\n    }\n\n    this._nodes[id] = new Node(id, value)\n  }\n\n  addArc(from: string, to: string) {\n    if (!this._adjacencyTable[from]) {\n      this._adjacencyTable[from] = {}\n    }\n    this._adjacencyTable[from][to] = true\n  }\n\n  getNodes() {\n    return this._nodes\n  }\n\n  getArcs() {\n    return Object.entries(this._adjacencyTable).map(([from, tos]) => {\n      return Object.entries(tos).filter(([, linked]) => linked).map(([to]) => [from, to])\n    }).flat()\n  }\n}\n\nclass FlowNode {\n  public id;\n  public position: Point\n  constructor(id: string, position: Point) {\n    this.id = id\n    this.position = position\n  }\n\n  toString() {\n    return this.id\n  }\n}\n\ntype NodeData = {\n  id: string,\n  position: Point,\n}\n\nfunction absoluteCoordinate(normalizedCoordinate: number, length: number) {\n  return (length + normalizedCoordinate * length) / 2\n}\nfunction normalizedCoordinate(absoluteCoordinate: number, length: number) {\n  return (absoluteCoordinate * 2 - length) / length\n}\n\nfunction absolutePosition(normalizedPosition: Point) {\n  return {\n    x: absoluteCoordinate(normalizedPosition.x, window.innerWidth),\n    y: absoluteCoordinate(normalizedPosition.y, window.innerHeight),\n  }\n}\n\nfunction relativePosition(absolutePosition: Point) {\n  return {\n    x: normalizedCoordinate(absolutePosition.x, window.innerWidth),\n    y: normalizedCoordinate(absolutePosition.y, window.innerHeight),\n  }\n}\n\nexport function FlowNetworkEditor() {\n  const muiClasses = useMUIStyles()\n  const [nodeData, setNodeData] = useState<{ [id: string]: NodeData }>({})\n  const [arcs, setArcs] = useState<NumericLabeledArcs>({})\n  const [flow, setFlow] = useState<NumericLabeledArcs>({})\n  const [source, setSource] = useState<NodeId | undefined>(undefined)\n  const [sink, setSink] = useState<NodeId | undefined>(undefined)\n  const [defaultArcCapacity] = useState(10)\n\n  const [selectedNode, setSelectedNode] = useState<NodeId | undefined>(undefined)\n\n  const graph = new Graph<FlowNode>();\n\n  Object.values(nodeData).forEach((node) => {\n    graph.addNode(node.id, new FlowNode(node.id, node.position))\n  })\n\n  for (const [from, tos] of Object.entries(arcs)) {\n    for (const [to] of Object.entries(tos)) {\n      graph.addArc(from, to)\n    }\n  }\n\n  const dragHandler = useCallback((id, event) => {\n    event.preventDefault()\n    const newPos = relativePosition({ x: event.clientX, y: event.clientY })\n    setNodeData((prev) => {\n      return {\n        ...prev,\n        [id]: {\n          id,\n          position: newPos\n        }\n      }\n    })\n  }, [setNodeData])\n\n  const canvasClickHandler = useCallback((e: React.MouseEvent) => {\n\n    setNodeData((prev) => {\n\n      //add a new node\n      const newNode = {\n        id: '' + Object.keys(prev).length,\n        position: relativePosition({ x: e.clientX, y: e.clientY })\n      }\n\n      return {\n        ...prev,\n        [newNode.id]: newNode,\n      }\n    })\n  }, [setNodeData])\n\n  const nodeClickHandler = useCallback((id: NodeId) => {\n    if(!selectedNode){\n      setSelectedNode(id)\n      return\n    }\n    //we add the new arc\n    if (id !== selectedNode && !arcs[selectedNode]?.[id] && !arcs[id]?.[selectedNode]) {\n      setArcs((prev) => ({\n        ...prev,\n        [selectedNode]: {\n          ...prev[selectedNode],\n          [id]: Math.round(8 * Math.random()) + 2\n        }\n      }))\n    }\n    setSelectedNode(undefined)\n  }, [selectedNode, setSelectedNode, arcs, setArcs])\n\n  const runClickHandler = source && sink ? () => {\n    new Promise<NumericLabeledArcs>((resolve) => {\n      const flow = fordFulkerson(source, sink, arcs)\n      resolve(flow)\n    }).then(setFlow)\n  } : undefined\n\n  const deleteClickHandler = selectedNode ? () => {\n    if (source === selectedNode) {\n      setSource(undefined)\n    }\n\n    if (sink === selectedNode) {\n      setSink(undefined)\n    }\n\n    setSelectedNode(undefined)\n\n    //remove the arcs from and to the node\n    const { [selectedNode]: fromDeletedNodeArcs, ...otherArcs } = arcs\n\n    //remove the ingoing arcs to the node\n    for (const tos of Object.values(otherArcs)) {\n      delete tos[selectedNode]\n    }\n\n    setArcs(otherArcs)\n    //remove the node\n    const { [selectedNode]: deletedNode, ...otherNodes } = nodeData\n    setNodeData(otherNodes)\n\n  } : undefined\n\n  const sourceMarkClickHandler = selectedNode && selectedNode !== sink ? () => {\n    if (selectedNode === source) {\n      setSource(undefined)\n    } else {\n      setSource(selectedNode)\n    }\n    setSelectedNode(undefined)\n  } : undefined\n\n  const sinkMarkClickHandler = selectedNode && selectedNode !== source ? () => {\n    if (selectedNode === sink) {\n      setSink(undefined)\n    } else {\n      setSink(selectedNode)\n    }\n    setSelectedNode(undefined)\n  } : undefined\n\n  const classes = useStyles()\n  const graphNodes = graph.getNodes()\n\n  return <>\n    <AppBar position=\"fixed\">\n      <Toolbar className={muiClasses.root}>\n        <div className={muiClasses.grow} />\n        <ButtonGroup variant='contained' >\n          <SmartButton onClick={sourceMarkClickHandler} startIcon={<InputIcon />}>{selectedNode === source ? 'Unm' : 'M'}ark as source</SmartButton>\n          <SmartButton onClick={sinkMarkClickHandler} startIcon={<FlagIcon />}>{selectedNode === sink ? 'Unm' : 'M'}ark as sink</SmartButton>\n          <SmartButton onClick={deleteClickHandler} startIcon={<DeleteIcon />}>Delete</SmartButton>\n        </ButtonGroup>\n        <SmartButton onClick={runClickHandler} color='primary' variant='contained' startIcon={<PlayArrowIcon />}>Compute</SmartButton>\n      </Toolbar>\n    </AppBar>\n    <div onClick={canvasClickHandler} className={classes.canvas}>\n      {\n        Object.values(graphNodes).map(({ value }) => {\n          const pos = absolutePosition(value.position)\n          return <FlowNetworkNode\n            key={value.id}\n            onDrag={dragHandler}\n            onClick={nodeClickHandler}\n            {...value}\n            positionX={pos.x}\n            positionY={pos.y}\n            bgColor={value.id === selectedNode ? 'red' : undefined}\n            label={sink === value.id ? <FlagIcon /> : (source === value.id ?  <InputIcon /> : undefined)}\n          />\n        })\n      }\n      {\n        graph.getArcs().map(([from, to]) => {\n          const start = absolutePosition(graphNodes[from].value.position)\n          const end = absolutePosition(graphNodes[to].value.position)\n          return <FlowArc\n            key={from + '-' + to}\n            flow={flow[from]?.[to] || 0}\n            capacity={arcs[from][to]}\n            startX={start.x}\n            startY={start.y}\n            endX={end.x}\n            endY={end.y}\n          />\n        })\n      }\n    </div>\n  </>\n\n}","E:\\workspace\\nightfun\\src\\geometry\\index.tsx",[],"E:\\workspace\\nightfun\\src\\utils\\index.tsx",[],"E:\\workspace\\nightfun\\src\\components\\flow\\FlowArc.tsx",[],"E:\\workspace\\nightfun\\src\\maxflow\\FordFulkerson.tsx",[],{"ruleId":"28","severity":1,"message":"29","line":119,"column":10,"nodeType":"30","messageId":"31","endLine":119,"endColumn":28},"@typescript-eslint/no-unused-vars","'defaultArcCapacity' is assigned a value but never used.","Identifier","unusedVar"]